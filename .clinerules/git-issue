# git-issue CLI: Rules & Best Practices

## Core Usage

- Create issue:  
  `git-issue create --title "Title" --content "Description" [--label label1,label2] [--parent PARENT_ID]`
- List issues:  
  `git-issue ls [--state all|closed] [--label bug] [--order desc]`
- View issue:  
  `git-issue view ISSUE_ID`
- Comment:  
  `git-issue comment ISSUE_ID --message "Comment"`
- Close/reopen:  
  `git-issue close|reopen ISSUE_ID --message "Reason"`
- Audit log:  
  `git-issue log [--limit N]`

## Batch Issue Creation (`plan`)

- Batch-create parent + sub-issues from JSON:  
  `git-issue plan --json '{"title":"Parent","content":"Desc","labels":["feature"],"sub_issues":[{"title":"Sub1","content":"Sub1 desc"}]}'`
- JSON:  
  - `title`, `content` required for parent & sub-issues
  - `labels` optional
- Troubleshooting:  
  - "No JSON input": use `--json` or `--file`
  - "Failed to parse": check JSON syntax/fields

## Best Practices

- Use clear, descriptive titles and detailed content
- Apply consistent labels (e.g., bug, enhancement)
- Break complex tasks into sub-issues
- Add meaningful comments and closing messages
- Reference issue IDs in commits (e.g., "Fix #001")
- Use `plan` for features/epics/sprints

## Implementation Requirement for Closing Issues

- **Issues and Sub-Issue may not be closed unless the task described in its title and content has been fully implemented in the codebase.**
- Before closing, verify that all code, documentation, and deliverables for the issue are present and meet the acceptance criteria.
- If the implementation is not present or incomplete, the issue must remain open, regardless of planning or review status.
- Closing an issue without implementation is considered a violation of this rule.

## Guidelines for Creating Well-Formatted, Descriptive Issues

- **Title:** Use a concise, action-oriented summary of the task or problem.
- **Description:** Clearly explain the context, requirements, and expected outcome.
- **Acceptance Criteria:** List specific, testable conditions that must be met for the issue to be considered complete.
- **References:** Link to related issues, documentation, or code as needed.
- **Checklist (optional):** For complex issues, include a checklist of subtasks.

### Issue Template Example

```
# Title
Short, descriptive summary of the issue

## Description
- What is the problem or task?
- Why is it important?
- Any relevant background/context?

## Acceptance Criteria
- [ ] Condition 1
- [ ] Condition 2

## References
- Related issues: #001, #002
- Documentation: [link]
```

## Issue Lifecycle

1. Creation (open)
2. Discussion (comments)
3. Implementation (sub-issues)
4. Planning (`plan`)
5. Resolution (close with message)
6. Verification (reopen if needed)

## TDD Integration

- Parent issues for features, sub-issues for test cases
- Use labels for test types (unit, integration, e2e)
- Track progress via comments and issue states

## Limitations

- No attachments/images, notifications, or visualization
- All sub-issues must be closed before parent
- All IDs must be in the three digit format with leading 0s. 001 for issues, 001-001 for sub-issues.
